// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Path> should check snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Path
    match={
        Object {
            "params": Object {
              "pathId": "testPath",
            },
          }
    }
    onCloseDialog={[Function]}
    onNotification={[Function]}
    onOpen={[Function]}
    onOpenSolution={[Function]}
    onProblemChangeRequest={[Function]}
    onProblemDialogShow={[Function]}
    onProblemMoveRequest={[Function]}
    onProblemSolutionSubmit={[Function]}
    onProfileUpdate={[Function]}
    onPushPath={[Function]}
    onRequestMoreProblems={[Function]}
    onToggleJoinStatus={[Function]}
    pathActivities={
        Object {
            "activities": Array [],
          }
    }
    pathStatus="test"
    ui={
        Object {
            "dialog": false,
          }
    }
    uid="testUser"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <WithStyles(Breadcrumbs)
          action={
                    Array [
                              Object {
                                "handler": [Function],
                                "label": "Request more",
                              },
                              false,
                              Object {
                                "handler": [Function],
                                "label": "Join",
                              },
                            ]
          }
          paths={
                    Array [
                              Object {
                                "label": "Paths",
                                "link": "/paths",
                              },
                              Object {
                                "label": "Default",
                              },
                            ]
          }
/>,
        false,
        <AddTextSolutionDialog
          onClose={[Function]}
          onCommit={[Function]}
          open={false}
          solution={undefined}
          taskId={undefined}
/>,
        <WithStyles(AddJestSolutionDialog)
          onClose={[Function]}
          onCommit={[Function]}
          open={false}
          problem={undefined}
          taskId={undefined}
/>,
        <AddProfileDialog
          externalProfile={
                    Object {
                              "description": "learn to Code JavaScript by Playing a Game",
                              "id": "CodeCombat",
                              "name": "Code Combat",
                              "url": "https://codecombat.com",
                            }
          }
          onClose={[Function]}
          onCommit={[Function]}
          open={false}
/>,
        <WithStyles(ActivitiesTable)
          activities={Array []}
          currentUserId="testUser"
          onEditProblem={[Function]}
          onMoveProblem={[Function]}
          onOpenProblem={[Function]}
          pathOwnerId={undefined}
          selectedPathId=""
/>,
        <ActivityDialog
          activity={undefined}
          onClose={[Function]}
          onCommit={[Function]}
          open={false}
          pathId=""
          uid="testUser"
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "action": Array [
            Object {
              "handler": [Function],
              "label": "Request more",
            },
            false,
            Object {
              "handler": [Function],
              "label": "Join",
            },
          ],
          "paths": Array [
            Object {
              "label": "Paths",
              "link": "/paths",
            },
            Object {
              "label": "Default",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "onClose": [Function],
          "onCommit": [Function],
          "open": false,
          "solution": undefined,
          "taskId": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "onClose": [Function],
          "onCommit": [Function],
          "open": false,
          "problem": undefined,
          "taskId": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "externalProfile": Object {
            "description": "learn to Code JavaScript by Playing a Game",
            "id": "CodeCombat",
            "name": "Code Combat",
            "url": "https://codecombat.com",
          },
          "onClose": [Function],
          "onCommit": [Function],
          "open": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activities": Array [],
          "currentUserId": "testUser",
          "onEditProblem": [Function],
          "onMoveProblem": [Function],
          "onOpenProblem": [Function],
          "pathOwnerId": undefined,
          "selectedPathId": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activity": undefined,
          "onClose": [Function],
          "onCommit": [Function],
          "open": false,
          "pathId": "",
          "uid": "testUser",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <WithStyles(Breadcrumbs)
            action={
                        Array [
                                    Object {
                                      "handler": [Function],
                                      "label": "Request more",
                                    },
                                    false,
                                    Object {
                                      "handler": [Function],
                                      "label": "Join",
                                    },
                                  ]
            }
            paths={
                        Array [
                                    Object {
                                      "label": "Paths",
                                      "link": "/paths",
                                    },
                                    Object {
                                      "label": "Default",
                                    },
                                  ]
            }
/>,
          false,
          <AddTextSolutionDialog
            onClose={[Function]}
            onCommit={[Function]}
            open={false}
            solution={undefined}
            taskId={undefined}
/>,
          <WithStyles(AddJestSolutionDialog)
            onClose={[Function]}
            onCommit={[Function]}
            open={false}
            problem={undefined}
            taskId={undefined}
/>,
          <AddProfileDialog
            externalProfile={
                        Object {
                                    "description": "learn to Code JavaScript by Playing a Game",
                                    "id": "CodeCombat",
                                    "name": "Code Combat",
                                    "url": "https://codecombat.com",
                                  }
            }
            onClose={[Function]}
            onCommit={[Function]}
            open={false}
/>,
          <WithStyles(ActivitiesTable)
            activities={Array []}
            currentUserId="testUser"
            onEditProblem={[Function]}
            onMoveProblem={[Function]}
            onOpenProblem={[Function]}
            pathOwnerId={undefined}
            selectedPathId=""
/>,
          <ActivityDialog
            activity={undefined}
            onClose={[Function]}
            onCommit={[Function]}
            open={false}
            pathId=""
            uid="testUser"
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "action": Array [
              Object {
                "handler": [Function],
                "label": "Request more",
              },
              false,
              Object {
                "handler": [Function],
                "label": "Join",
              },
            ],
            "paths": Array [
              Object {
                "label": "Paths",
                "link": "/paths",
              },
              Object {
                "label": "Default",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "onClose": [Function],
            "onCommit": [Function],
            "open": false,
            "solution": undefined,
            "taskId": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "onClose": [Function],
            "onCommit": [Function],
            "open": false,
            "problem": undefined,
            "taskId": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "externalProfile": Object {
              "description": "learn to Code JavaScript by Playing a Game",
              "id": "CodeCombat",
              "name": "Code Combat",
              "url": "https://codecombat.com",
            },
            "onClose": [Function],
            "onCommit": [Function],
            "open": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activities": Array [],
            "currentUserId": "testUser",
            "onEditProblem": [Function],
            "onMoveProblem": [Function],
            "onOpenProblem": [Function],
            "pathOwnerId": undefined,
            "selectedPathId": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activity": undefined,
            "onClose": [Function],
            "onCommit": [Function],
            "open": false,
            "pathId": "",
            "uid": "testUser",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {},
  },
}
`;
