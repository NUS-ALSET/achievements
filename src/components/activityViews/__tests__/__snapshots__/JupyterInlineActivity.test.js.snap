// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<JupyterInlineActivity> should check snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <JupyterInlineActivity
    dispatch={[Function]}
    problem={
        Object {
            "problemJSON": "test",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <JupyterNotebook
          action={[Function]}
          defaultValue={undefined}
          persistent={true}
          readOnly={undefined}
          richEditor={true}
          solution={false}
          title="Edit code"
/>,
        undefined,
        undefined,
        <JupyterNotebook
          readOnly={undefined}
          solution={
                    Object {
                              "json": "test",
                            }
          }
          title="Problem"
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "action": [Function],
          "defaultValue": undefined,
          "persistent": true,
          "readOnly": undefined,
          "richEditor": true,
          "solution": false,
          "title": "Edit code",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      undefined,
      undefined,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "readOnly": undefined,
          "solution": Object {
            "json": "test",
          },
          "title": "Problem",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <JupyterNotebook
            action={[Function]}
            defaultValue={undefined}
            persistent={true}
            readOnly={undefined}
            richEditor={true}
            solution={false}
            title="Edit code"
/>,
          undefined,
          undefined,
          <JupyterNotebook
            readOnly={undefined}
            solution={
                        Object {
                                    "json": "test",
                                  }
            }
            title="Problem"
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "action": [Function],
            "defaultValue": undefined,
            "persistent": true,
            "readOnly": undefined,
            "richEditor": true,
            "solution": false,
            "title": "Edit code",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        undefined,
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "readOnly": undefined,
            "solution": Object {
              "json": "test",
            },
            "title": "Problem",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {},
  },
}
`;
